<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Exploitation NoSQL</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container { 
            background: white; 
            padding: 30px; 
            border-radius: 8px; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        h1 { color: #333; text-align: center; }
        h2 { color: #e74c3c; border-bottom: 2px solid #e74c3c; padding-bottom: 10px; }
        h3 { color: #28a745; }
        .test-section {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
        }
        .vulnerable, .secure {
            flex: 1;
            padding: 20px;
            border-radius: 8px;
        }
        .vulnerable {
            background-color: #fff5f5;
            border: 2px solid #e74c3c;
        }
        .secure {
            background-color: #f0fff4;
            border: 2px solid #28a745;
        }
        input, textarea, button {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover { background-color: #0056b3; }
        .btn-danger { background-color: #dc3545; }
        .btn-danger:hover { background-color: #c82333; }
        .btn-success { background-color: #28a745; }
        .btn-success:hover { background-color: #218838; }
        .result {
            margin-top: 15px;
            padding: 15px;
            border-radius: 5px;
            min-height: 50px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
        }
        .payload {
            background-color: #fff3cd;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
            border-left: 4px solid #ffc107;
        }
        code {
            background-color: #f8f9fa;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
        }
        .back-btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #6c757d;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .back-btn:hover { background-color: #545b62; }
    </style>
</head>
<body>
    <a href="/" class="back-btn">‚Üê Retour √† l'accueil</a>
    
    <div class="container">
        <h1>üîì Page d'Exploitation des Vuln√©rabilit√©s NoSQL</h1>
        
        <h2>1. üîê Test d'Authentification</h2>
        <div class="test-section">
            <div class="vulnerable">
                <h3>üö® Version Vuln√©rable</h3>
                <form id="loginVulnerable">
                    <input type="text" id="username1" placeholder="Username" value="admin">
                    <input type="text" id="password1" placeholder="Password" value="admin123">
                    <button type="submit" class="btn-danger">Tester Login Vuln√©rable</button>
                </form>
                <div class="result" id="resultLogin1"></div>
                
                <div class="payload">
                    <strong>üíÄ Payload d'exploitation:</strong><br>
                    <code>Username: {"$ne": ""}</code><br>
                    <code>Password: {"$ne": ""}</code><br>
                    <small>Ce payload bypass l'authentification en utilisant l'op√©rateur $ne (not equal)</small>
                </div>
                <button onclick="exploitLogin()" class="btn-danger">üéØ Exploiter!</button>
            </div>
            
            <div class="secure">
                <h3>‚úÖ Version S√©curis√©e</h3>
                <form id="loginSecure">
                    <input type="text" id="username2" placeholder="Username" value="admin">
                    <input type="password" id="password2" placeholder="Password" value="admin123">
                    <button type="submit" class="btn-success">Tester Login S√©curis√©</button>
                </form>
                <div class="result" id="resultLogin2"></div>
            </div>
        </div>

        <h2>2. üîç Test de Recherche</h2>
        <div class="test-section">
            <div class="vulnerable">
                <h3>üö® Recherche Vuln√©rable</h3>
                <form id="searchVulnerable">
                    <textarea id="query1" placeholder="Requ√™te de recherche" rows="3">{"username": "admin"}</textarea>
                    <button type="submit" class="btn-danger">Rechercher (Vuln√©rable)</button>
                </form>
                <div class="result" id="resultSearch1"></div>
                
                <div class="payload">
                    <strong>üíÄ Payloads d'exploitation:</strong><br>
                    <code>{"username": {"$ne": ""}}</code> - R√©cup√®re tous les utilisateurs<br>
                    <code>{"role": "admin"}</code> - Trouve les admins<br>
                    <code>{"$where": "this.username === 'admin'"}</code> - Injection JavaScript<br>
                </div>
                <button onclick="exploitSearch()" class="btn-danger">üéØ Voir tous les utilisateurs!</button>
            </div>
            
            <div class="secure">
                <h3>‚úÖ Recherche S√©curis√©e</h3>
                <form id="searchSecure">
                    <input type="text" id="searchTerm" placeholder="Terme de recherche" value="admin">
                    <button type="submit" class="btn-success">Rechercher (S√©curis√©)</button>
                </form>
                <div class="result" id="resultSearch2"></div>
            </div>
        </div>

        <h2>üìö Explications des Vuln√©rabilit√©s</h2>
        <div class="container">
            <h3>üî¥ Injection NoSQL - Login</h3>
            <p>L'endpoint vuln√©rable accepte directement les objets JavaScript/JSON, permettant d'injecter des op√©rateurs MongoDB comme <code>$ne</code>, <code>$gt</code>, <code>$regex</code>, etc.</p>
            
            <h3>üî¥ Injection NoSQL - Recherche</h3>
            <p>L'endpoint de recherche vuln√©rable ex√©cute directement la requ√™te fournie, permettant d'ex√©cuter des requ√™tes MongoDB arbitraires.</p>
            
            <h3>üü¢ Rem√©diation</h3>
            <ul>
                <li><strong>Validation des types:</strong> S'assurer que les param√®tres sont des cha√Ænes</li>
                <li><strong>Sanitisation:</strong> Supprimer les caract√®res sp√©ciaux MongoDB ($, .)</li>
                <li><strong>Hachage s√©curis√©:</strong> Utilisation de bcrypt pour les mots de passe</li>
                <li><strong>Requ√™tes contr√¥l√©es:</strong> Utiliser des patterns de recherche s√©curis√©s</li>
            </ul>
        </div>
    </div>

    <script>
        // Login vuln√©rable
        document.getElementById('loginVulnerable').addEventListener('submit', async (e) => {
            e.preventDefault();
            const username = document.getElementById('username1').value;
            const password = document.getElementById('password1').value;
            
            try {
                let data = { username, password };
                // Essayer de parser comme JSON si √ßa commence par {
                if (username.startsWith('{')) {
                    data.username = JSON.parse(username);
                }
                if (password.startsWith('{')) {
                    data.password = JSON.parse(password);
                }
                
                const response = await fetch('/login-vulnerable', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                document.getElementById('resultLogin1').innerHTML = 
                    `<strong>R√©sultat:</strong> <pre>${JSON.stringify(result, null, 2)}</pre>`;
            } catch (err) {
                document.getElementById('resultLogin1').innerHTML = 
                    `<strong>Erreur:</strong> ${err.message}`;
            }
        });

        // Login s√©curis√©
        document.getElementById('loginSecure').addEventListener('submit', async (e) => {
            e.preventDefault();
            const username = document.getElementById('username2').value;
            const password = document.getElementById('password2').value;
            
            const response = await fetch('/login-secure', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password })
            });
            const result = await response.json();
            document.getElementById('resultLogin2').innerHTML = 
                `<strong>R√©sultat:</strong> <pre>${JSON.stringify(result, null, 2)}</pre>`;
        });

        // Recherche vuln√©rable
        document.getElementById('searchVulnerable').addEventListener('submit', async (e) => {
            e.preventDefault();
            let query = document.getElementById('query1').value;
            
            try {
                query = JSON.parse(query);
                const response = await fetch('/search-vulnerable', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query })
                });
                const result = await response.json();
                document.getElementById('resultSearch1').innerHTML = 
                    `<strong>R√©sultat:</strong> <pre>${JSON.stringify(result, null, 2)}</pre>`;
            } catch (err) {
                document.getElementById('resultSearch1').innerHTML = 
                    `<strong>Erreur:</strong> ${err.message}`;
            }
        });

        // Recherche s√©curis√©e
        document.getElementById('searchSecure').addEventListener('submit', async (e) => {
            e.preventDefault();
            const searchTerm = document.getElementById('searchTerm').value;
            
            const response = await fetch('/search-secure', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ searchTerm })
            });
            const result = await response.json();
            document.getElementById('resultSearch2').innerHTML = 
                `<strong>R√©sultat:</strong> <pre>${JSON.stringify(result, null, 2)}</pre>`;
        });

        // Fonctions d'exploitation
        function exploitLogin() {
            document.getElementById('username1').value = '{"$ne": ""}';
            document.getElementById('password1').value = '{"$ne": ""}';
            document.getElementById('loginVulnerable').dispatchEvent(new Event('submit'));
        }

        function exploitSearch() {
            document.getElementById('query1').value = '{"username": {"$ne": ""}}';
            document.getElementById('searchVulnerable').dispatchEvent(new Event('submit'));
        }
    </script>
</body>
</html>
